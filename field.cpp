/*******************************************************************************
* タイトル:		フィールドプログラム
* プログラム名:	field.cpp
* 作成者:		GP11A132 99 外岡高明
* 作成日:		2022/04/18
*******************************************************************************/



/*******************************************************************************
* インクルードファイル
*******************************************************************************/
#include "main.h"
#include "player.h"
#include "enemy.h"
#include "field.h"
#include "battle.h"


/*******************************************************************************
* マクロ定義
*******************************************************************************/


/*******************************************************************************
* 構造体定義
*******************************************************************************/


/*******************************************************************************
* プロトタイプ宣言
*******************************************************************************/


/*******************************************************************************
* グローバル変数
*******************************************************************************/
// fieldのルール
// 0:通れる
// 1:障害物
// 
//		縦　横
int field[10][10] = {
	1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,
};



/*******************************************************************************
 関数名:	
 引数　:	
 戻り値:	
 説明　:	
*******************************************************************************/

// Fieldの初期化
void InitField(void)
{
	// プレイヤーの初期化
	InitPlayer();

	// エネミーの初期化
	InitEnemy();

}


// Fieldの終了処理
void UninitField(void)
{
	UninitPlayer();
	UninitEnemy();

}


// フィールドの更新処理
void UpdateField(void)
{
	// プレイヤーの座標更新処理
	UpdatePlayer();

	// エネミーの座標更新処理
	UpdateEnemy();

	{	// 当たり判定
		PLAYER* player = GetPlayer();
		ENEMY* enemy = GetEnemy();

		if ((player[0].x == enemy[0].x) && (player[0].y == enemy[0].y))
		{	// 当たっていたらバトルへＧｏ！
			
			system("cls");
			printf("\n\n\n\t\tバトルへＧｏ！\n");
			Sleep(2000);
			// キー入力待ち
			rewind(stdin);
			(void)_getch();
			system("cls");

			SetBattle(0);	// バトルの０番を実行する
			SetMode(2);		// バトルモードへ遷移する
		}

	}


}




// フィールドの描画関数
void DrawField(void)
{
	PLAYER* player = GetPlayer();
	ENEMY* enemy = GetEnemy();

	for (int y = 0; y < 10; y++)
	{
		// １行分の表示処理
		for (int x = 0; x < 10; x++)
		{
			// プレイヤーの座標だったらPを表示する
			if ((y == player[0].y) && (x == player[0].x))
			{
				DrawPlayer();
			}
			else if ((y == enemy[0].y) && (x == enemy[0].x))
			{
				DrawEnemy();
			}
			else
			{	// プレイヤー座標じゃなかったらフィールドを表示する
				switch (field[y][x])
				{
				case 0:
					printf(" ");
					break;

				case 1:
					printf("#");
					break;
				}
			}
		}

		printf("\n");	// 次の行へ改行
	}

	Sleep(100);			// Wait 1000 = １秒
}



int GetFieldData(int y, int x)
{
	return field[y][x];
}








